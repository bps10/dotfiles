#!/bin/bash
# Search and Replace

function search_replace {	 
	 # check if help argument passed.
	 if [ "$1" = "-h" ] || [ "$1" = "help" ] || [ "$1" = "" ]
	 then
		echo " "
		echo search_replace
		echo "====================================================="
		echo A function for searching an expression and replacing it
		echo with another within specified files.
		echo "-----------------------------------------------------"
		echo USAGE
		echo search_replace search_term replace_term directories
		echo
		echo OPTIONAL
		echo 4th argument "soft" will run a search to demonstrate
		echo which files will be changed but will not actually
		echo perform the task.		
		echo " "
		echo EXAMPLE
		echo search_replace util.convolve array.convolve "*/*.m"
		echo " "
		echo All instances of util.convolve will be replaced with
		echo array.convolve in .m files within all subdirectories.
		echo NOTE: when using *.ext notation it must be in "" to
		echo work correctly
		echo "-----------------------------------------------------"
		echo " "
	 else
	 
	 # first print out what will be changed
	 echo
	 echo --------------------------------------	 
	 echo $1 was found in files within $3:
	 echo --------------------------------------
	 grep $1 $3
	 echo --------------------------------------
	 echo $1 will be replaced with $2
	 echo --------------------------------------
	 echo 

	 if [ "$4" != "soft" ]
	 then
	 local val1=$1
	 local val2=$2
	 local val3=$3
	 
	 # Now replace those strings
	 sed -i -e "s/$val1/$val2/g" ${val3}

	 # Check that it worked
	 echo " "
	 echo "Check that it worked:"
	 grep $2 $3
	 else
		echo " "
		echo soft run. no files were changed.
		echo rerun without soft argument to make changes.
		echo 
	 fi
	 
	 fi

}

# Simple calculator
function calc() {
	local result=""
	result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
	#                       └─ default (when `--mathlib` is used) is 20
	#
	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		printf "$result" |
		sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
		    -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
		    -e 's/0*$//;s/\.$//'   # remove trailing zeros
	else
		printf "$result"
	fi
	printf "\n"
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

